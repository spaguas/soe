<!doctype html>
<html lang="pt-br">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>SP-Águas • Mapa</title>

  <script src="https://code.jquery.com/jquery-3.6.1.min.js"
    integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>

  <!-- Bootstrap 5 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q"
    crossorigin="anonymous"></script>


  <!-- Leaflet -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>

  <!-- IconLayers -->
  <script src="
  https://cdn.jsdelivr.net/npm/leaflet-iconlayers@0.2.0/dist/iconLayers.min.js
  "></script>
  <link href="
  https://cdn.jsdelivr.net/npm/leaflet-iconlayers@0.2.0/dist/iconLayers.min.css
  " rel="stylesheet">

  <!-- Dixie - IndexedDB -->
  <script src="https://cdn.jsdelivr.net/npm/dexie@4.0.4/dist/dexie.min.js"></script>

  <!-- MarkerCluster CSS/JS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css">
  <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css">
  <script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js"></script>

  <script src="libs/beautifyIcons/leaflet-beautify-marker-icon.js"></script>
  <link href="libs/beautifyIcons/leaflet-beautify-marker-icon.css" rel="stylesheet" type="text/css" />

  <!-- Datatables -->
  <link rel="stylesheet" type="text/css" href="//cdn.datatables.net/2.3.4/css/dataTables.dataTables.min.css" />
  <link rel="stylehseet" type="text/css" href="https://cdn.datatables.net/2.3.4/css/dataTables.bootstrap5.css" />
  <script type="text/javascript" src="//cdn.datatables.net/2.3.4/js/dataTables.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/2.3.4/js/dataTables.bootstrap5.js"></script>

  <style>
    html,
    body {
      height: 100%;
      margin: 0;
    }

    #map {
      position: fixed;
      inset: 0;
      width: 100vw;
      height: 92.5vh;
      top: 56px;
    }

    @media only screen and (max-device-width: 600px) {
      #map {
        height: 93.6%;
        top: 56px;
      }      
    }

    .leaflet-container a {
      color: var(--bs-primary);
    }

    .leaflet-control .btn {
      line-height: 1;
      padding: .5rem .75rem;
    }

    .navbar-brand img {
      height: 32px;
    }

    .leaflet-touch .leaflet-control-layers,
    .leaflet-touch .leaflet-bar {
      border: none;
    }
  </style>
</head>
<!-- Loading params to filters -->
<script src="diretorias.js"></script>
<script src="municipios.js"></script>
<script src="ugrhis.js"></script>
<script src="scripts/base_layers.js"></script>
<script src="scripts/iconlayer_control.js"></script>
<script src="scripts/filter_control.js"></script>
<script src="scripts/watermark_control.js"></script>
<script src="scripts/map_progress.js"></script>
<script src="scripts/radius_search_control.js"></script>
<script src="scripts/table_control.js"></script>

<body>
  <!-- NAVBAR -->
  <nav class="navbar navbar-expand-lg bg-body-tertiary shadow-sm fixed-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <img src="/logo-spaguas-colorido.png" alt="SP-Águas" />
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item"><a class="nav-link active" href="#">Início</a></li>
          <li class="nav-item"><a class="nav-link" href="#map">Mapa</a></li>
          <li class="nav-item"><a class="nav-link" href="#" data-bs-toggle="offcanvas" data-bs-target="#offFilters">Filtros</a></li>
          <li class="nav-item"><a class="nav-link" href="#">Relatórios</a></li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
              aria-expanded="false">Mais</a>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="#">Configurações</a></li>
              <li><a class="dropdown-item" href="#">Ajuda</a></li>
              <li>
                <hr class="dropdown-divider">
              </li>
              <li><a class="dropdown-item" href="#">Sair</a></li>
            </ul>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Global loading bar (top) -->
  <!--<div id="global-progress" class="progress position-fixed w-100 start-10"
    style="height: 25px; z-index: 2000; display:none;">
    <div id="global-progress-bar" class="progress-bar bg-success progress-bar-striped progress-bar-animated" role="progressbar"
      style="width: 0%" aria-valuemin="0" aria-valuemax="100">25%</div>
  </div>-->
  <div id="global-progress" class="progress position-fixed w-100 start-10" style="height: 5px; z-index: 2000; display:none;" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
    <div id="global-progress-bar" class="progress-bar text-bg-success" style="width: 0%;"></div>
  </div>

  <!-- MAPA FULLSCREEN -->
  <div id="map" role="region" aria-label="Mapa interativo"></div>

  <div class="modal modal-fade" id="modalTable" tabindex="-1">
    <div class="modal-dialog modal-fullscreen">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Lista de Outorgas Carregadas</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <table id="outorgasTable" class="table table-bordered table-sm" style="width:100%; font-size: 0.65rem;">
            <thead>
              <tr>
                <th rowspan="2">Id</th>
                <th rowspan="2">Uso</th>
                <th rowspan="2">Cidade</th>
                <th rowspan="2">Ugrhi</th>
                <th rowspan="2">Diretoria</th>
                <th rowspan="2">Requerente</th>
                <th rowspan="2">Coordenadas</th>
                <th rowspan="2">Tipo de Uso</th>
                <th rowspan="2">Finalidade</th>
                <th rowspan="2">Portaria</th>
                <th rowspan="2">Data de Publicação</th>
                <th rowspan="2">Volume Anual (m³)</th>
                <th rowspan="2">Vazão (m³/s)</th>
                <th rowspan="2">Sazonal?</th>
                <th rowspan="2">Status</th>
                <th colspan="3">Janeiro</th>
                <th colspan="3">Fevereiro</th>
                <th colspan="3">Março</th>
                <th colspan="3">Abril</th>
                <th colspan="3">Maio</th>
                <th colspan="3">Junho</th>
                <th colspan="3">Julho</th>
                <th colspan="3">Agosto</th>
                <th colspan="3">Setembro</th>
                <th colspan="3">Outubro</th>
                <th colspan="3">Novembro</th>
                <th colspan="3">Dezembro</th>

              </tr>
              <tr>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
                
                <th>Horas</th>
                <th>Vol.Máx (m³/d)</th>
                <th>Vazão(m³/h)</th>
              </tr>
            </thead>
            <tbody id="outorgasTableBody">
              <!-- Data will be populated here -->
            </tbody>
          </table>  
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary">Save changes</button>
        </div>
      </div>
    </div>
  </div>

  <!-- OFFCANVAS: Filtro por Raio(km)-->
  <div class="offcanvas offcanvas-end" tabindex="-1" id="offRadiusSearch" aria-labelledby="offRadiusSearchLabel">
    <div class="offcanvas-header">
      <h5 class="offcanvas-title" id="offRadiusSearchLabel">Busca por Raio (km)</h5>
      <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Fechar"></button>
    </div>
    <div class="offcanvas-body">
      <form id="radiusSearchForm" class="vstack gap-3">
        <div class="form-floating">
          <input type="number" class="form-control" id="radius_km" placeholder="Raio em km" min="0.1" max="50" value="10" />
          <label for="radius_km">Raio (km):</label>
        </div>

        <div class="form-floating">
          <input type="text" class="form-control" id="center_lat" placeholder="Latitude do centro" />
          <label for="center_lat">Latitude do centro:</label>
        </div>

        <div class="form-floating">
          <input type="text" class="form-control" id="center_lng" placeholder="Longitude do centro" />
          <label for="center_lng">Longitude do centro:</label>
        </div>

        <div class="d-grid gap-6 d-md-flex justify-content-md-end">
          <button type="button" class="btn btn-success me-md-1" id="radiusSearchButton"><i class="bi bi-search"></i> Buscar</button>
          <button type="reset" class="btn btn-secondary" id="radiusClearButton"><i class="bi bi-trash"></i> Limpar</button>
        </div>
      </form>
    </div>
  </div>

  <!-- OFFCANVAS: Controles e Filtros -->
  <div class="offcanvas offcanvas-end" tabindex="-1" id="offFilters" aria-labelledby="offFiltersLabel">
    <div class="offcanvas-header">
      <h5 class="offcanvas-title" id="offFiltersLabel">Filtros</h5>
      <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Fechar"></button>
    </div>
    <div class="offcanvas-body">
      <form id="filterForm" class="vstack gap-3">
        <div class="form-floating">
          <select id="diretorias" class="form-select">
          </select>
          <label for="es-field">Gerências</label>
        </div>

        <div class="form-floating">
          <select id="ugrhis" class="form-select">
          </select>
          <label for="es-field">Ugrhis</label>
        </div>

        <div class="form-floating">
          <select id="municipios" class="form-select">
          </select>
          <label for="es-field">Municípios</label>
        </div>

        

        <div class="form-floating">
          <select id="tipo_uso" class="form-select">
            <option value="">-</option>
            <option value="Travessia Subterrânea">Travessia Subterrânea</option>
            <option value="Autorização para perfuração de Poço Tubular">Poço Tubular</option>
            <option value="Lançamento Superficial">Lançamento Superficial</option>
            <option value="Captação Subterrânea">Captação Subterrânea</option>
            <option value="Captação Superficial">Captação Superficial</option>
            <option value="Reservatório de Acumulação">Reservatório de Acumulação</option>
            <option value="Obra ou Serviço de Proteção de Margem ou Leito">Obra ou Serviço</option>
            <option value="Retificação / Revogação">Retificação / Revogação</option>
            <option value="Canalização">Canalização</option>
            <option value="Travessia Aérea">Travessia Aérea</option>
            <option value="Barramento">Barramento</option>
            <option value="Desassoreamento e Limpeza de Margem">Desassoreamento</option>
            <option value="Travessia">Travessia</option>
            <option value="Extração de Minério">Extração de Minério</option>
          </select>
          <label for="es-field">Tipo de Uso</label>
        </div>

        <div class="form-floating">
          <select name="tipo_finalidade_grupo" id="finalidade" class="form-select">
            <option value="">-</option>
            <option value="Urbano">Urbano</option>
            <option value="Irrigação">Irrigação</option>
            <option value="Industrial">Industrial</option>
            <option value="Doméstico">Doméstico</option>
            <option value="Aquicultura">Aquicultura</option>
            <option value="Outros">Outros</option>
            <option value="Comércio e Serviços">Comércio e Serviços</option>
            <option value="Recreação e Paisagismo">Recreação e Paisagismo</option>
            <option value="Regularização de Nível">Regularização de Nível</option>
            <option value="Regularização de Vazões">Regularização de Vazões</option>
            <option value="Mineração">Mineração</option>
            <option value="Rural">Rural</option>
            <option value="Controle de Cheias">Controle de Cheias</option>
            <option value="Geração de Energia">Geração de Energia</option>
          </select>
          <label for="es-field">Tipo de Finalidade</label>
        </div>

        <div class="form-floating">
          <input type="date" class="form-control" id="data_publicacao" placeholder="Data de Publicação" />
          <label for="data_publicacao">Data de Publicação após:</label>
        </div>

        <div class="d-grid gap-6 d-md-flex justify-content-md-end">
          <button type="button" class="btn btn-success me-md-1" id="searchButton"><i class="bi bi-search"></i> Buscar</button>
          <button type="reset" class="btn btn-secondary" id="clearButton"><i class="bi bi-trash"></i> Limpar</button>
        </div>
        
      </form>
      <hr />
      <div class="small text-secondary mb-2">Resultados</div>
      <div id="es-summary" class="small mb-2">—</div>
      <ul id="results" class="list-group small mb-3"></ul>
    </div>
  </div>

  <!-- Bootstrap JS -->


  <script>
    const INITIAL_VIEW = { lat: -23.5505, lng: -46.6333, zoom: 10 };
    const map = L.map('map').setView([INITIAL_VIEW.lat, INITIAL_VIEW.lng], INITIAL_VIEW.zoom);

    function isMobile() {
      return (('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));
    }

    //Criando panes para controlar ordem das camadas
    map.createPane('markersPane');
    map.createPane('layersPane');

    map.getPane('layersPane').style.zIndex = 200; // abaixo das camadas base
    map.getPane('layersPane').style.pointerEvents = 'none';

    const fields = ["latitude", "longitude", "portaria", "cod_ibge", "tipo_uso", "municipio", "sol_req_num_cod", "tipo_finalidade_grupo", "data_publicacao", "data_exame", "diretoria_nome", "tipo_requerimento", "volume_m3_anual", "vazao_normalizada_m3s", "status_uso", "status_req", "status_data_exame", "status_sols", "decisao_pto", "cnpj_requerente", "cpf_requerente", "nome_requerente", "tem_sazonalidade", "razao_social_requerente", "cod_ugrhi", "nome_ugrhi", "tipo_finalidade_usos", "total_hours*", "vaz_*", "vol_max_*, validade_meses_pto"].join(",");

    // Try to enable persistent storage
    tryEnablePersistentStorage().then(info => {
      if (info.persisted) {
        console.log("Storage is persistent.");
      } else {
        console.log("Storage is not persistent.");
      }
    });

    // Base layers control
    iconLayersControl.addTo(map);

    // IndexedDB via Dexie.js
    const ONE_DAY = 24 * 60 * 60 * 1000;
    const db = new Dexie('outorgas_db');

    db.version(1).stores({
      // id: chave do doc (ES _id), savedAt pra TTL, e campos usados como índices
      items: 'id, savedAt, tipo_uso, ugrhi_codigo, cod_ibge, diretoria, tipo_finalidade_grupo, data_publicacao',
      // metadados por “coleção” (nome livre; ex.: 'outorgas_all')
      meta: 'name'
    });

    iconLayersControl.on('activelayerchange', function (e) {
      console.log('layer switched', e.layer);
      map.invalidateSize();

      let isDark = false;
      //Change watermakr logo with layer names is black
      if (e.layer._url.indexOf('black') > -1 || e.layer._url.indexOf('dark') > -1 || e.layer._url.indexOf('satelite') > -1 || e.layer._url.indexOf('satel') > -1) {
        isDark = true;
      }

      updateWatermark(isDark);
    });

    populateMunicipiosSelect()
    populateUgrhisSelect()
    populateDiretoriasSelect()
    //getAllOutorgas()

    // Layers for grouping
    let ugrhiLayer = L.layerGroup([]);
    let municipioLayer = L.layerGroup([]);
    let geo_distance_groups = L.layerGroup([]);

    const canvasRenderer = L.canvas({ padding: 0.5 });

    let markersLayer = L.markerClusterGroup({
      pane: 'markersPane',
      chunkedLoading: true,
      chunkInterval: 200,
      chunkProgress: updateProgressBarMarkers,
      maxClusterRadius: 40,
      spiderfyOnMaxZoom: true,
      showCoverageOnHover: true,
      zoomToBoundsOnClick: true,
      animate: false,
      removeOutsideVisibleBounds: true,
      animateAddingMarkers: false,
      spiderLegPolylineOptions: { weight: 1.5, color: '#888', opacity: 0.25 }

    }).addTo(map);

    municipioLayer.addTo(map);
    ugrhiLayer.addTo(map);
    geo_distance_groups.addTo(map);

    //let markersLayer = L.featureGroup([], { renderer: canvasRenderer }).addTo(map);

    // Botão no mapa para abrir offcanvas
    map.addControl(new FilterControl());

    // Watermark com logo no canto inferior direito
    map.addControl(new WatermarkControl());

    const radiusCtrl = new RadiusSearchControl();
    map.addControl(radiusCtrl);

    map.addControl(new tableControl());

    map.on('click', function (e) {
      console.log("Map clicked at", e.latlng);
    });

    map.on('overlayadd', function() {
        markersLayer.bringToFront();
    });

    db.on('blocked', () => console.warn('Upgrade bloqueado por outra aba.'));
    db.on('versionchange', () => db.close());

    document.getElementById('radiusSearchButton').addEventListener('click', function () {
      const radius_km = parseFloat(document.getElementById('radius_km').value);
      const center_lat = parseFloat(document.getElementById('center_lat').value);
      const center_lng = parseFloat(document.getElementById('center_lng').value);

      if (isNaN(radius_km) || isNaN(center_lat) || isNaN(center_lng)) {
        alert("Por favor, preencha todos os campos corretamente.");
        return;
      }

      const radius_m = radius_km * 1000; // converter km para metros
      const center = [center_lat, center_lng];

      // Limpar camadas anteriores
      municipioLayer.clearLayers();
      ugrhiLayer.clearLayers();
      geo_distance_groups.clearLayers();

      // Adicionar círculo ao mapa
      const circle = L.circle(center, {
        color: 'blue',
        fillColor: '#blue',
        fillOpacity: 0.1,
        radius: radius_m
      }).addTo(geo_distance_groups);

      let marker = L.marker(center,{           
        icon: L.BeautifyIcon.icon({
          iconShape: 'circle-dot',
          borderWidth: 5,
          borderColor: 'blue'
        })
      }).addTo(geo_distance_groups);

      map.fitBounds(circle.getBounds());

      // Filtrar outorgas dentro do raio
      getAllOutorgas({ forceRefresh: false }, { geo_distance: { center, radius_km } });
    });

    document.getElementById('searchButton').addEventListener('click', function () {
      const ugrhi = document.getElementById('ugrhis').value;
      const municipio = document.getElementById('municipios').value;
      const tipo_uso = document.getElementById('tipo_uso').value;
      const finalidade = document.getElementById('finalidade').value;
      const data_publicacao = document.getElementById('data_publicacao').value;
      const tipo_finalidade_grupo = document.getElementById('finalidade').value;
      const diretoria = document.getElementById('diretorias').value;

      const filter = {};
      if (ugrhi) filter.ugrhi = ugrhi;
      if (municipio) filter.municipio = municipio;
      if (tipo_uso) filter.tipo_uso = tipo_uso;
      if (finalidade) filter.tipo_finalidade_grupo = finalidade;
      if (data_publicacao) filter.data_publicacao = data_publicacao;
      if (tipo_finalidade_grupo) filter.tipo_finalidade_grupo = tipo_finalidade_grupo;
      if (diretoria) filter.diretoria = diretoria;

      municipioLayer.clearLayers();
      ugrhiLayer.clearLayers();

      getAllOutorgas({ forceRefresh: false }, filter);
    });


    function loadUgrhiLayer() {
      let url = "./ugrhis/" + $("#ugrhis").val();

      if ($("#ugrhis").val() != "") {
        $.get(url).then(response => {
          ugrhiLayer.clearLayers()

          let res = JSON.parse(response.replaceAll("&#34;", "\""));
          console.log("Response Ugrhi: ", res);

          let ll = L.geoJSON(res, {
            pane: 'layersPane',
            style: function (feature) {
              return { color: '#2222dd', opacity: 0.5, weight: 2, stroke: true, fillOpacity: 0.05};
            }
          });

          ugrhiLayer.addLayer(ll);
          map.fitBounds(ugrhiLayer.getLayers()[0].getBounds())
        }).fail(error => {
          ugrhiLayer.clearLayers();
          console.error(error);
        });
      }
    }

    function loadMunicipioLayer() {
      //let url = "https://datageo.ambiente.sp.gov.br/geoserver/datageo/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=datageo:LimiteMunicipal&maxFeatures=700&outputFormat=application%2Fjson";
      let url = "./municipios/" + $("#municipios").val();

      let filter_cql = {};

      if ($("#municipios").val() != "") {
        $.get(url).then(response => {
          //console.log("Get Cities: ", response);
          municipioLayer.clearLayers();

          let res = JSON.parse(response.replaceAll("&#34;", "\""));
          let ll = L.geoJSON(res, {
            pane: 'layersPane',
            style: function (feature) {
              return {
                backgroundColor: 'red'
              }
            }
          });
          municipioLayer.addLayer(ll);

          map.fitBounds(municipioLayer.getLayers()[0].getBounds());

        }).fail(error => {
          municipioLayer.clearLayers();
          console.error(error);
        })
      }
    }

    async function tryEnablePersistentStorage() {
      try {
        // Só em navegadores que implementam a API
        if (!('storage' in navigator)) {
          console.info('[storage] StorageManager indisponível; seguindo sem persist().');
          return { supported: false, persisted: false };
        }

        // (Opcional) estimativa de quota/uso
        let quotaInfo = null;
        if (typeof navigator.storage.estimate === 'function') {
          try { quotaInfo = await navigator.storage.estimate(); } catch { }

        }

        // (Opcional) verificar se já está persistido
        let already = false;
        if (typeof navigator.storage.persisted === 'function') {
          try { already = await navigator.storage.persisted(); } catch { }
        }

        // Tentar persistir (pode exigir gesto do usuário em alguns browsers)
        let persisted = already;
        if (!already && typeof navigator.storage.persist === 'function') {
          try { persisted = await navigator.storage.persist(); } catch { }
        }

        console.info('[storage] persistência:', { supported: true, persisted, quotaInfo });
        return { supported: true, persisted, quotaInfo };
      } catch (e) {
        console.warn('[storage] falha ao negociar persistência:', e);
        return { supported: false, persisted: false };
      }
    }

    function setProgressBar(containerId, barId, percentage) {
      const container = document.getElementById(containerId);
      const bar = document.getElementById(barId);
      if (!container || !bar) return;

      if (percentage >= 100) {
        bar.style.width = '100%';
        setTimeout(() => {
          bar.style.width = '0%';
          container.style.display = 'none';
        }, 500); // espera meio segundo antes de esconder*/
      } else {
        container.style.display = 'block';
        bar.style.display = 'block';
        bar.style.width = `${percentage}%`;
        bar.textContent = `${percentage}%`;
      }
    }

    function updateProgressBarMarkers(processed, total, elapsed) {
      // Atualiza barra de progresso de marcadores
      /*let per = Math.round((processed / total) * 100);
      //setProgressBar('global-progress', 'global-progress-bar', per);
      setTimeout(() => {
           //setProgressBar("global-progress", "global-progress-bar", per);
      }, 50);*/
    }

    // Helpers TTL
    async function getMeta(name) {
      return (await db.meta.get(name)) || null;
    }
    async function setMeta(name, obj) {
      await db.meta.put({ name, ...obj, savedAt: Date.now() });
    }
    function isFresh(savedAt, maxAge = ONE_DAY) {
      return savedAt && (Date.now() - savedAt) < maxAge;
    }

    // Converte hits do ES no formato compacto
    function toCompactRecords(hits) {
      const out = [];
      for (const h of (hits || [])) {
        const id = h._id || h.id;
        if (!id) continue;
        const s = h._source || {};
        const lat = s.latitude, lon = s.longitude;
        if (lat == null || lon == null) continue;

        //console.log("Processando registro:", h);

        // guarde só o necessário
        out.push({
          id,
          lat: +lat,            // garantimos number
          lon: +lon,
          name: s.name || s.portaria || id,
          portaria: s.portaria || null,
          cod_ibge: s.cod_ibge ?? null,
          tipo_uso: s.tipo_uso ?? null,
          ugrhi_codigo: s.cod_ugrhi || s.ugrhi || null,
          ugrhi: { codigo: s.ugrhi || s.cod_ugrhi || null, nome: s.nome_ugrhi || null },
          municipio: { nome: s.municipio || null, cod_ibge: s.cod_ibge ?? null },
          sol_req_num_cod: s.sol_req_num_cod ?? null,
          tipo_finalidade_grupo: s.tipo_finalidade_grupo ?? null,
          finalidade: s.tipo_finalidade_usos ?? null,
          data_publicacao: s.data_publicacao ?? null,
          data_exame: s.data_exame ?? null,
          diretoria: s.diretoria_nome ?? null,
          tipo_requerimento: s.tipo_requerimento ?? null,
          volume_m3_anual: s.volume_m3_anual != null ? +s.volume_m3_anual : null,
          vazao_normalizada_m3s: s.vazao_normalizada_m3s != null ? +s.vazao_normalizada_m3s : null,
          status_uso: s.status_uso ?? null,
          status_requerimento: s.status_req ?? null,
          status_data_exame: s.status_data_exame ?? null,
          status_sols: s.status_sols ?? null,
          decisao_pto: s.decisao_pto ?? null,
          requerente: { id: s.cnpj_requerente || s.cpf_requerente || null, nome: s.nome_requerente || s.razao_social_requerente || null },
          tem_sazonalidade: s.tem_sazonalidade === true,
          vazoes: {
            jan: { horas: s.total_hours_in_day_jan, vazao_m3h: s.vaz_jan, vol_max: s.vol_max_jan },
            fev: { horas: s.total_hours_in_day_fev, vazao_m3h: s.vaz_fev, vol_max: s.vol_max_fev },
            mar: { horas: s.total_hours_in_day_mar, vazao_m3h: s.vaz_mar, vol_max: s.vol_max_mar },
            abr: { horas: s.total_hours_in_day_abr, vazao_m3h: s.vaz_abr, vol_max: s.vol_max_abr },
            mai: { horas: s.total_hours_in_day_mai, vazao_m3h: s.vaz_mai, vol_max: s.vol_max_mai },
            jun: { horas: s.total_hours_in_day_jun, vazao_m3h: s.vaz_jun, vol_max: s.vol_max_jun },
            jul: { horas: s.total_hours_in_day_jul, vazao_m3h: s.vaz_jul, vol_max: s.vol_max_jul },
            ago: { horas: s.total_hours_in_day_ago, vazao_m3h: s.vaz_ago, vol_max: s.vol_max_ago },
            set: { horas: s.total_hours_in_day_set, vazao_m3h: s.vaz_set, vol_max: s.vol_max_set },
            out: { horas: s.total_hours_in_day_out, vazao_m3h: s.vaz_out, vol_max: s.vol_max_out },
            nov: { horas: s.total_hours_in_day_nov, vazao_m3h: s.vaz_nov, vol_max: s.vol_max_nov },
            dez: { horas: s.total_hours_in_day_dez, vazao_m3h: s.vaz_dez, vol_max: s.vol_max_dez }
          },
          savedAt: Date.now()
        });
      }
      return out;
    }

    // Grava incrementando, sem duplicar
    async function saveIncremental(hits, collectionName = 'outorgas_all') {
      const recs = toCompactRecords(hits);
      if (!recs.length) return { added: 0 };

      // put() sobrescreve se já existir; não duplica
      await db.items.bulkPut(recs);
      await setMeta(collectionName, { count: await db.items.count() });
      return { added: recs.length };
    }

    async function loadAllFromCache(filter) {
      
      //return db.items.toArray();
      keys = Object.keys(filter);

      if (filter && keys.length) {
        // Aplica filtros simples
        let collection = db.items;

        //console.log("Collection: ", collection);
        console.log("Keys: ", keys);

        //aplica apenas o primeiro filtro (por enquanto)
        if(keys.length == 1){
          console.log("Carregando do cache com filtro:", filter);

          if(keys[0] == 'ugrhi'){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi))
          } else if(keys[0] == 'tipo_uso'){
            collection = collection.where('tipo_uso').equals(filter.tipo_uso);
          } else if(keys[0] == 'tipo_finalidade_grupo'){
            collection = collection.where('tipo_finalidade_grupo').equals(filter.tipo_finalidade_grupo);
          } else if(keys[0] == 'municipio'){
            collection = collection.where('cod_ibge').equals(filter.municipio);
          } else if(keys[0] == 'data_publicacao'){
            collection = collection.where('data_publicacao').aboveOrEqual(filter.data_publicacao);
          } else if(keys[0] == 'diretoria'){
            collection = collection.where('diretoria').equals(filter.diretoria);
          } else if(keys[0] == 'geo_distance'){
            //filtro por distância geográfica
            const center = filter.geo_distance.center;
            const radius_km = filter.geo_distance.radius_km;
            const radius_m = radius_km * 1000;

            collection = collection.filter(item => {
              if(item.lat == null || item.lon == null) return false;
              const d = map.distance([item.lat, item.lon], center);
              return d <= radius_m;
            });
          } 
        }else if(keys.length == 2){
          console.log("Filtro composto: ", filter);
          if(["ugrhi","municipio"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.cod_ibge == filter.municipio);
          }
          if(["ugrhi","tipo_uso"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.tipo_uso == filter.tipo_uso);
          }
          if(["ugrhi","tipo_finalidade_grupo"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.tipo_finalidade_grupo == filter.tipo_finalidade_grupo);
          }
          if(["ugrhi","data_publicacao"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.data_publicacao >= filter.data_publicacao);
          }
          if(["ugrhi","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.diretoria == filter.diretoria);
          }
          if(["municipio","tipo_uso"].every(key => keys.includes(key))){
            collection = collection.where('cod_ibge').equals(filter.municipio).and(item => item.tipo_uso == filter.tipo_uso);
          }
          if(["municipio","tipo_finalidade_grupo"].every(key => keys.includes(key))){
            collection = collection.where('cod_ibge').equals(filter.municipio).and(item => item.tipo_finalidade_grupo == filter.tipo_finalidade_grupo);
          }
          if(["municipio","data_publicacao"].every(key => keys.includes(key))){
            collection = collection.where('cod_ibge').equals(filter.municipio).and(item => item.data_publicacao >= filter.data_publicacao);
          }
          if(["municipio","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('cod_ibge').equals(filter.municipio).and(item => item.diretoria == filter.diretoria);
          }
          if(["tipo_uso","tipo_finalidade_grupo"].every(key => keys.includes(key))){
            collection = collection.where('tipo_uso').equals(filter.tipo_uso).and(item => item.tipo_finalidade_grupo == filter.tipo_finalidade_grupo);
          }
          if(["tipo_uso","data_publicacao"].every(key => keys.includes(key))){
            collection = collection.where('tipo_uso').equals(filter.tipo_uso).and(item => item.data_publicacao >= filter.data_publicacao);
          }
          if(["tipo_uso","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('tipo_uso').equals(filter.tipo_uso).and(item => item.diretoria == filter.diretoria);
          }
          if(["tipo_finalidade_grupo","data_publicacao"].every(key => keys.includes(key))){
            collection = collection.where('tipo_finalidade_grupo').equals(filter.tipo_finalidade_grupo).and(item => item.data_publicacao >= filter.data_publicacao);
          }
          if(["tipo_finalidade_grupo","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('tipo_finalidade_grupo').equals(filter.tipo_finalidade_grupo).and(item => item.diretoria == filter.diretoria);
          }
          if(["data_publicacao","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('data_publicacao').aboveOrEqual(filter.data_publicacao).and(item => item.diretoria == filter.diretoria);
          }          
        } else if(keys.length == 3){
          if(["ugrhi","municipio","tipo_uso"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.cod_ibge == filter.municipio && item.tipo_uso == filter.tipo_uso);
          }
          if(["ugrhi","municipio","tipo_finalidade_grupo"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.cod_ibge == filter.municipio && item.tipo_finalidade_grupo == filter.tipo_finalidade_grupo);
          }
          if(["ugrhi","municipio","data_publicacao"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.cod_ibge == filter.municipio && item.data_publicacao >= filter.data_publicacao);
          }
          if(["ugrhi","municipio","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.cod_ibge == filter.municipio && item.diretoria == filter.diretoria);
          }

          if(["ugrhi","tipo_uso","tipo_finalidade_grupo"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.tipo_uso == filter.tipo_uso && item.tipo_finalidade_grupo == filter.tipo_finalidade_grupo);
          }
          if(["ugrhi","tipo_uso","data_publicacao"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.tipo_uso == filter.tipo_uso && item.data_publicacao >= filter.data_publicacao);
          }
          if(["ugrhi","tipo_uso","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.tipo_uso == filter.tipo_uso && item.diretoria == filter.diretoria);
          }
          if(["ugrhi","tipo_finalidade_grupo","data_publicacao"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.tipo_finalidade_grupo == filter.tipo_finalidade_grupo && item.data_publicacao >= filter.data_publicacao);
          }
          if(["ugrhi","tipo_finalidade_grupo","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.tipo_finalidade_grupo == filter.tipo_finalidade_grupo && item.diretoria == filter.diretoria);
          }
          if(["ugrhi","data_publicacao","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('ugrhi_codigo').equals(parseInt(filter.ugrhi)).and(item => item.data_publicacao >= filter.data_publicacao && item.diretoria == filter.diretoria);
          }

          if(["municipio","tipo_uso","tipo_finalidade_grupo"].every(key => keys.includes(key))){
            collection = collection.where('cod_ibge').equals(filter.municipio).and(item => item.tipo_uso == filter.tipo_uso && item.tipo_finalidade_grupo == filter.tipo_finalidade_grupo);
          }
          if(["municipio","tipo_uso","data_publicacao"].every(key => keys.includes(key))){
            collection = collection.where('cod_ibge').equals(filter.municipio).and(item => item.tipo_uso == filter.tipo_uso && item.data_publicacao >= filter.data_publicacao);
          }
          if(["municipio","tipo_uso","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('cod_ibge').equals(filter.municipio).and(item => item.tipo_uso == filter.tipo_uso && item.diretoria == filter.diretoria);
          }
          if(["municipio","tipo_finalidade_grupo","data_publicacao"].every(key => keys.includes(key))){
            collection = collection.where('cod_ibge').equals(filter.municipio).and(item => item.tipo_finalidade_grupo == filter.tipo_finalidade_grupo && item.data_publicacao >= filter.data_publicacao);
          }
          if(["municipio","tipo_finalidade_grupo","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('cod_ibge').equals(filter.municipio).and(item => item.tipo_finalidade_grupo == filter.tipo_finalidade_grupo && item.diretoria == filter.diretoria);
          }
          if(["municipio","data_publicacao","diretoria"].every(key => keys.includes(key))){
            collection = collection.where('cod_ibge').equals(filter.municipio).and(item => item.data_publicacao >= filter.data_publicacao && item.diretoria == filter.diretoria);
          } 
        }

        results = await collection.toArray();
        console.log("Collection after filter: ", results.length);

        return results;
      } else {
        return await db.items.toArray();
      }
    }

    function renderRowsTable(recs, clearBefore = true) {
      let tableBody = document.getElementById('outorgasTableBody');
      if (clearBefore) tableBody.innerHTML = '';

      for (const r of recs) {
        console.log("Renderizando linha da tabela:", r);
        const tr = document.createElement('tr');

        if(r.tem_sazonalidade){
          tr.classList.add('table-danger');
        }
        
        tr.innerHTML = `
          <td>${r.sol_req_num_cod || ''}</td>
          <td>${r.tipo_uso || ''}</td>
          <td>${r.municipio?.nome || ''}</td>
          <td>${r.ugrhi?.nome || ''}</td>
          <td>${r.diretoria || ''}</td>
          <td>${r.requerente?.id || ''}</td>
          <td>${r.requerente?.nome || ''}</td>
          <td>${r.tipo_uso || ''}</td>
          <td>${r.tipo_finalidade_grupo || ''}</td>
          <td>${r.numero_portaria || ''}</td>
          <td>${r.data_publicacao || ''}</td>
          <td>${r.volume_m3_anual != null ? r.volume_m3_anual.toLocaleString('pt-BR') : ''}</td>
          <td>${r.vazao_normalizada_m3s != null ? r.vazao_normalizada_m3s.toLocaleString('pt-BR') : ''}</td>
          <td>${r.tem_sazonalidade ? 'Sim' : 'Não'}</td>
          <td>${r.status_uso || '-'}</td>
          <td>${r.vazoes.jan?.horas || '-'}</td>
          <td>${r.vazoes.jan?.vol_max || '-'}</td>
          <td>${r.vazoes.jan?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.fev?.horas || '-'}</td>
          <td>${r.vazoes.fev?.vol_max || '-'}</td>
          <td>${r.vazoes.fev?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.mar?.horas || '-'}</td>
          <td>${r.vazoes.mar?.vol_max || '-'}</td>
          <td>${r.vazoes.mar?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.abr?.horas || '-'}</td>
          <td>${r.vazoes.abr?.vol_max || '-'}</td>
          <td>${r.vazoes.abr?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.mai?.horas || '-'}</td>
          <td>${r.vazoes.mai?.vol_max || '-'}</td>
          <td>${r.vazoes.mai?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.jun?.horas || '-'}</td>
          <td>${r.vazoes.jun?.vol_max || '-'}</td>
          <td>${r.vazoes.jun?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.jul?.horas || '-'}</td>
          <td>${r.vazoes.jul?.vol_max || '-'}</td>
          <td>${r.vazoes.jul?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.ago?.horas || '-'}</td>
          <td>${r.vazoes.ago?.vol_max || '-'}</td>
          <td>${r.vazoes.ago?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.set?.horas || '-'}</td>
          <td>${r.vazoes.set?.vol_max || '-'}</td>
          <td>${r.vazoes.set?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.out?.horas || '-'}</td>
          <td>${r.vazoes.out?.vol_max || '-'}</td>
          <td>${r.vazoes.out?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.nov?.horas || '-'}</td>
          <td>${r.vazoes.nov?.vol_max || '-'}</td>
          <td>${r.vazoes.nov?.vazao_m3h || '-'}</td>
          <td>${r.vazoes.dez?.horas || '-'}</td>
          <td>${r.vazoes.dez?.vol_max || '-'}</td>
          <td>${r.vazoes.dez?.vazao_m3h || '-'}</td>
        `;
        tableBody.appendChild(tr);
      }
    }

    async function renderFromCacheToMap(filter) {
      const recs = await loadAllFromCache(filter);
      
      let tableBody = document.getElementById('outorgasTableBody');
      if (tableBody) tableBody.innerHTML = '';

      let summary = document.getElementById('es-summary');

      console.log("Renderizando do cache:", recs.length, "registros");
      console.log("Filtro:", filter);

      if (!recs.length) return 0;

      let added = 0;

      try { markersLayer.clearLayers(); } catch { }

      const batch = 100; // processa em lotes para evitar travar a UI
      for (let i = 0; i < recs.length; i += batch) {
        const chunk = recs.slice(i, i + batch);
        //console.log("Chunk:", chunk);

        const addedNow = addMarkersFromHits(chunk.map(r => ({
          _id: r.id, _source: {
            latitude: r.lat, longitude: r.lon,
            name: r.name,
            tipo_uso: r.tipo_uso,
            sol_req_num_cod: r.sol_req_num_cod,
            ugrhi: r.ugrhi,
            municipio: r.municipio,
            diretoria: r.diretoria,
            cod_ibge: r.cod_ibge,
            tipo_finalidade_grupo: r.tipo_finalidade_grupo,
            data_publicacao: r.data_publicacao,
            status_uso: r.status_uso
          }
        })));

        renderRowsTable(chunk, false); // false = não limpa antes

        added += addedNow;
        //console.log(`Renderizado do cache: ${i + chunk.length} / ${recs.length} registros (${addedNow} marcadores adicionados)`);
        if(summary){
          let per = Math.round(((i + chunk.length) / recs.length) * 100);
          summary.textContent = `Carregando : ${per.toFixed(2)}% - Total ${recs.length}`;
          setProgressBar("global-progress", "global-progress-bar", per);
        }
        await new Promise(res => setTimeout(res, 1)); // pausa breve para UI
      }

      // Fit Bounds após carregar
      if (markersLayer.getLayers().length) {
        loadMunicipioLayer();
        loadUgrhiLayer();
        map.fitBounds(markersLayer.getBounds(), { maxZoom: 12, padding: [50, 50] });

        /*let table = new DataTable('#outorgasTable', {
          layout: {
              topStart: 'info',
              bottom: 'paging',
              bottomStart: null,
              bottomEnd: null
          },
          language: {
            url: 'https://cdn.datatables.net/plug-ins/1.11.5/i18n/pt-BR.json'
          }
        });*/
      }

      document.getElementById('es-summary').textContent =
        `Outorgas (cache): ${recs.length} • Carregados (mapa): ${added}`;
      console.log(`Renderizado do cache: ${recs.length} registros, ${added} marcadores adicionados`);
      return added;
    }

    function populateDiretoriasSelect() {
      $("#diretorias").empty();
      $("#diretorias").append("<option value=''>-</option>");
      $.each(diretorias, function (k, v) {
        let obj = "<option value='" + v.nome + "'>" + v.nome + "</option>";
        //console.log(obj);
        $("#diretorias").append(obj);
      });
    }

    function populateUgrhisSelect() {
      $("#ugrhis").empty();
      $("#ugrhis").append("<option value=''>-</option>");
      $.each(ugrhis.ugrhis, function (k, v) {
        let obj = "<option value='" + v.codigo + "'>" + v.nome + "</option>";
        //console.log(obj);
        if (v.codigo != 99 && v.codigo != 9999) {
          $("#ugrhis").append(obj);
        }
      });
    }

    function populateMunicipiosSelect() {
      $("#municipios").empty();

      $("#municipios").append("<option value=''>-</option>");
      $.each(municipios.municipios, function (k, v) {

        let obj = "<option value='" + v.codigo_ibge + "'>" + v.nome + "</option>";
        //console.log(obj);
        $("#municipios").append(obj);
      });
    }

    // Função para trocar a watermark conforme o mapa base
    function updateWatermark(isDark) {
      const imgs = document.querySelectorAll('.watermark-logo img');
      imgs.forEach(img => {
        if (img.src.includes('logo-spaguas')) {
          img.src = isDark ? 'logo-spaguas-branco.png' : 'logo-spaguas-colorido.png';
        }
      });
    }

    function clearMarkers() { markersLayer.clearLayers(); }

    function styleMarkerByType(type) {
      switch ((type || '').toLowerCase()) {
        case 'captação superficial': return '#1f77b4'; // azul
        case 'captação subterrânea': return '#ff7f0e'; // laranja
        case 'lançamento superficial': return '#2ca02c'; // verde
        case 'reservatório de acumulação': return '#d62728'; // vermelho
        case 'barramento': return '#9467bd'; // roxo
        case 'retificação / revogação': return '#8c564b'; // marrom
        case 'canalização': return '#e377c2'; // rosa
        case 'travessia aérea': return '#7f7f7f'; // cinza
        case 'travessia subterrânea': return '#bcbd22'; // amarelo
        case 'travessia': return '#cc99aa';
        case 'desassoreamento e limpeza de margem': return '#cc2222';
        case 'desassoreamento': return '#cc2222';
        case 'poço tubular': return '#ddaa22';
        case 'obra/serviço': return '#aabb99';
        default: return '#cccccc'; // vermelho
      }
    }

    function getIconOptsFromUI() {
      // lê seus campos do offcanvas (ou defauls)
      const lib = document.getElementById('icon-lib')?.value || 'fa';
      const cls = (document.getElementById('icon-class')?.value || 'fa-solid fa-location-dot').trim();
      const iconColor = document.getElementById('icon-color')?.value || '#ffffff';
      const iconSize = parseInt(document.getElementById('icon-size')?.value, 10) || 18;
      const fillColor = document.getElementById('circle-fill')?.value || '#0d6efd';
      const strokeColor = document.getElementById('circle-stroke')?.value || '#083ea6';
      const strokeWidth = parseInt(document.getElementById('circle-stroke-width')?.value, 10) || 2;
      const padding = parseInt(document.getElementById('circle-padding')?.value, 10) || 6;
      return { lib, cls, iconColor, iconSize, fillColor, strokeColor, strokeWidth, padding };
    }


    function addMarkersFromHits(hits, popupField = null) {
      let added = 0;
      summary = document.getElementById('es-summary');

      for (const h of hits) {
        const src = h._source || {};
        let lat = src.latitude, lon = src.longitude;
        if (lat != null && lon != null) {
          const cm = L.circleMarker([lat, lon], {
            renderer: canvasRenderer,
            radius: 8,
            stroke: true,
            fillOpacity: 1,
            fillColor: styleMarkerByType(src.tipo_uso),
            weight: 2,
            color: '#000000'
          }).addTo(markersLayer);

          const title = src.name || h._id;
          //const extra = (popupField && src[popupField] != null) ? `<br><small>${popupField}: ${src[popupField]}</small>` : '';
          //console.log("src:", src);
          const extra = (popupField && src[popupField] != null) ? `<br><small>${popupField}: ${src[popupField]}</small>` : `
            <br><small>Tipo de Uso: ${src.tipo_uso || '-'}</small>
            <br><small>Finalidade: ${src.tipo_finalidade_grupo || '-'}</small>
            <br><small>Municipio: ${src.municipio.nome || '-'}</small>
            <br><small>Ugrhi: ${src.ugrhi.nome || '-'}</small>
            <br><small>Data Publicação: ${src.data_publicacao || '-'}</small>
            <br><small style='color: ${getColorByStatusUso(src.status_uso)}'><b>Status</b>: ${src.status_uso || '-'}</small>
          `;
          cm.bindPopup(`<b>ID: ${title}</b>${extra}`);
          added++;        
        }
      }
      return added;
    }

    function getColorByStatusUso(status) {
      if (!status) return '#000000';
      
      if(status.toLowerCase().includes(' deferid')){ return '#28a745'; } // verde
      if(status.toLowerCase().includes(' indeferida')){ return '#dc3545'; } // vermelho
      if(status.toLowerCase().includes(' revogad')){ return '#D2691E'; } // cinza
      if(status.toLowerCase().includes('excluído')){ return '#ffc107'; } // amarelo
      if(status.toLowerCase().includes('cadastrado')){ return '#fd7e14'; } // laranja
    }

    async function getAllOutorgas({ forceRefresh = false } = {}, filter = {}) {
      //Try load from cache first
      try {

        const meta = await getMeta('outorgas_all');
        const fresh = meta && isFresh(meta.savedAt, ONE_DAY);
        const hasCache = (await db.items.count()) > 0;

        if (hasCache && fresh && !forceRefresh) {
          //console.log("Usando cache local (filtros:", filter, ")");
          await renderFromCacheToMap(filter); // Pass filter to the function
          return;
        }

        const url = '/api/outorgas/all?fields=' + fields;
        const res = await fetch(url);
        if (!res.ok) throw new Error(`HTTP ${res.status} ${res.statusText}`);
        const data = await res.json();

        await saveIncremental(data?.hits?.hits || []);
        //await renderFromCacheToMap(); // ou desenhe só o lote atual, como preferir

        let scrollId = data._scroll_id;
        const fetchNext = async () => {
          if (!scrollId) return;
          const nextRes = await fetch(`/api/outorgas/scroll_list?scroll_id=${encodeURIComponent(scrollId)}`);
          if (!nextRes.ok) throw new Error(`HTTP ${nextRes.status}`);
          const nextData = await nextRes.json();
          const chunk = nextData?.hits?.hits || [];
          if (chunk.length) {
            await saveIncremental(chunk);    // grava incremental
            // dica: para UX, você pode também “streamar” para o mapa:
            //addMarkersFromHits(toCompactRecords(chunk).map(r => ({ _id: r.id, _source: { latitude:r.lat, longitude:r.lon, name:r.name, ...} })));
            addMarkersFromHits(toCompactRecords(chunk).map(r => ({
              _id: r.id, _source:
              {
                latitude: r.lat, longitude: r.lon,
                name: r.name, tipo_uso: r.tipo_uso,
                sol_req_num_cod: r.sol_req_num_cod,
                tipo_finalidade_grupo: r.tipo_finalidade_grupo,
                tipo_uso: r.tipo_uso,
                cod_ibge: r.cod_ibge,
                ugrhi: r.ugrhi,
                municipio: r.municipio,
                diretoria: r.diretoria,
                data_publicacao: r.data_publicacao,
                status_uso: r.status_uso
              }
            })));
            scrollId = nextData._scroll_id;

            if(summary){
              let per = Math.round(((i + chunk.length) / recs.length) * 100);
              summary.textContent = `Carregando : ${per.toFixed(2)}% - Total ${recs.length}`;
              setProgressBar("global-progress", "global-progress-bar", per);
            }
            await new Promise(res => setTimeout(res, 1)); // pausa breve para UI

            await fetchNext();
          } else {
            scrollId = null;
          }
        };

        fetchNext();

        document.getElementById('es-summary').textContent = `Outorgas atualizadas • ${new Date().toLocaleString()}`;


      } catch (err) {
        console.error("Erro ao carregar cache do localStorage:", err);
        document.getElementById('es-summary').textContent = 'Erro ao carregar cache!';
        return;
      }

      //Fit bounds after loading
      if (markersLayer.getLayers().length) {
        loadMunicipioLayer();
        loadUgrhiLayer();
        map.fitBounds(markersLayer.getBounds(), { maxZoom: 12, padding: [50, 50] });
      }
    }
  </script>
</body>

</html>